<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DisplayActionOk" xml:space="preserve">
    <value> ok</value>
  </data>
  <data name="DisplayErrorLoadTaskFile" xml:space="preserve">
    <value>ERROR: Unable to load the XML recording task configuration file.</value>
  </data>
  <data name="DisplayExceptionFormat" xml:space="preserve">
    <value>EXCEPTION: {1}</value>
  </data>
  <data name="DisplayLoadingXml" xml:space="preserve">
    <value>Loading XML...</value>
  </data>
  <data name="ErrorNoArguments" xml:space="preserve">
    <value>ERROR: No arguments have been specified.
Use /HELP for more information.</value>
  </data>
  <data name="InfoLoadingTaskFile" xml:space="preserve">
    <value>Info: Loading XML task file...</value>
  </data>
  <data name="InfoOk" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="LogExceptionLoadTaskFile" xml:space="preserve">
    <value>Unable to load the XML recording task configuration file.</value>
  </data>
  <data name="LoggerExceptionFormat" xml:space="preserve">
    <value>{0}
Exception details: {1}</value>
  </data>
  <data name="LogInfoCreatingWindowsJob" xml:space="preserve">
    <value>Creating Windows Job</value>
  </data>
  <data name="LogInfoCreatingWindowsJobOk" xml:space="preserve">
    <value>Windows Job created</value>
  </data>
  <data name="LogInfoLoadingXml" xml:space="preserve">
    <value>Loading XML file
{0}</value>
  </data>
  <data name="LogInfoLoadingXmlOk" xml:space="preserve">
    <value>XML file loaded</value>
  </data>
  <data name="PressAnyKeyEnd" xml:space="preserve">
    <value>Press any key to exit...</value>
  </data>
  <data name="ProgramCaption" xml:space="preserve">
    <value>IPTV Recorder launcher utility</value>
  </data>
  <data name="ProgramHelp" xml:space="preserve">
    <value>{0} XMLTaskFile
{0} /help | /h | /? | -help | -h | -?

XMLTaskFile     XML file containing the record task definition.
                Loads the task and launches the external recorder.

/help      Displays this help message.

-- General options --
/nologo     Supresses the banner.
Options and switches can be specified with '/' or with '-'</value>
  </data>
  <data name="StartLogo" xml:space="preserve">
    <value>IPTV Recorder launcher utility
Version {0}
(C) 2014. All rights reserved.</value>
  </data>
  <data name="DisplayWarningRecordingLate" xml:space="preserve">
    <value>Warning: RECORDING LATE, beyond the safety margin of {0} minutes</value>
  </data>
  <data name="LogErrorTooLate" xml:space="preserve">
    <value>TOO LATE! Sorry about that!</value>
  </data>
  <data name="LogExceptionAssignProcessToJobObject" xml:space="preserve">
    <value>AssignProcessToJobObject({0}, {1})</value>
  </data>
  <data name="LogExceptionCreateJobObject" xml:space="preserve">
    <value>CreateJobObject('{0}')</value>
  </data>
  <data name="LogExceptionSetInformationJobObject" xml:space="preserve">
    <value>SetInformationJobObject(...)</value>
  </data>
  <data name="LogVerboseJobHandle" xml:space="preserve">
    <value>Job handle: {0}</value>
  </data>
  <data name="LogVerboseJobName" xml:space="preserve">
    <value>Job name: {0}</value>
  </data>
  <data name="LogVerboseScheduledStartTimeGap" xml:space="preserve">
    <value>Scheduled start time: {0:T}
Scheduled total time: {1}
Gap: {2}
Real record time: {3}</value>
  </data>
  <data name="LogWarningDevelopmentWindowsJob" xml:space="preserve">
    <value>Running under development context. Windows Job creation was aborted</value>
  </data>
  <data name="LogWarningRecordingLate" xml:space="preserve">
    <value>RECORDING LATE, beyond the safety margin of {0} minutes</value>
  </data>
  <data name="DisplayLaunchingRecorder" xml:space="preserve">
    <value>Launching external recorder...</value>
  </data>
  <data name="DisplayLaunchingRecorderOk" xml:space="preserve">
    <value> ok (PID {0})</value>
  </data>
  <data name="DisplayRecorderFinished" xml:space="preserve">
    <value>Recorder program has finished</value>
  </data>
  <data name="DisplayRecordingTimeExceeded" xml:space="preserve">
    <value>ERROR: Recording time exceeded!</value>
  </data>
  <data name="DisplayScheduledDuration" xml:space="preserve">
    <value>Scheduled recording duration is {0}, with an additional safety margin of {1} minutes.</value>
  </data>
  <data name="DisplayTaskName" xml:space="preserve">
    <value>Task name: {0}</value>
  </data>
  <data name="DisplayTotalRecordingTime" xml:space="preserve">
    <value>Total recording time, including safety margins, will be {0}.</value>
  </data>
  <data name="DisplayWarningBehindSchedule" xml:space="preserve">
    <value>Warning: Recording behind schedule. Gap is {0}</value>
  </data>
  <data name="FormatRecordFileDate" xml:space="preserve">
    <value>{0}-{1:00}-{2:00} {3:00}-{4:00}-{5:00}</value>
  </data>
  <data name="FormatRecordFileDelayed" xml:space="preserve">
    <value> Delayed!</value>
  </data>
  <data name="FormatRecordFileName" xml:space="preserve">
    <value>{0}\{1} {2}{3}{4}</value>
  </data>
  <data name="LogErrorRecordingTimeExceeded" xml:space="preserve">
    <value>Recording time exceeded!</value>
  </data>
  <data name="LogExceptionLaunchingRecorder" xml:space="preserve">
    <value>Unable to execute recorder program</value>
  </data>
  <data name="LogInfoLaunchingRecorder" xml:space="preserve">
    <value>Launching external recorder program</value>
  </data>
  <data name="LogInfoLaunchingRecorderOk" xml:space="preserve">
    <value>Recorder program successfully started (process Id is {0})</value>
  </data>
  <data name="LogInfoRecorderExited" xml:space="preserve">
    <value>Recorder program has exited (exit code is {0})</value>
  </data>
  <data name="LogVerboseAboutLaunchRecorder" xml:space="preserve">
    <value>About to launch recorder program</value>
  </data>
  <data name="LogVerboseCreatingRecorderParameters" xml:space="preserve">
    <value>Creating parameters for recorder program</value>
  </data>
  <data name="LogVerboseWaitForExit" xml:space="preserve">
    <value>WaitForExit()</value>
  </data>
  <data name="LogWarningBehindSchedule" xml:space="preserve">
    <value>Recording behind schedule. Gap is {0}</value>
  </data>
  <data name="ExceptionEndInnerList" xml:space="preserve">
    <value>[End of inner exception list]</value>
  </data>
  <data name="DisplayDurationEndsToday" xml:space="preserve">
    <value>The recording ends today at {0:T}.</value>
  </data>
  <data name="DisplayDurationEndsTomorrow" xml:space="preserve">
    <value>The recording ends tomorrow at {0:T}.</value>
  </data>
</root>